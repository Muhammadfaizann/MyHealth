// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;

using CoreGraphics;
using Foundation;
using UIKit;
using ObjCRuntime;
using System.Threading.Tasks;

using MyHealthDB;
using MyHealthDB.Logger;

namespace RCSI
{
	public partial class HomeController : UIViewController
	{
		#region [Private Properties]

		private UIScrollView _labelScrollviewContainer {
			get;
			set;
		}

		private nfloat _labelWidth {
			get;
			set;
		}

		private UILabel _lblMessageCloned {
			get;
			set;
		}

		private UILabel _lblMessage {
			get;
			set;
		}

		#endregion

		public HomeController (IntPtr handle) : base (handle)
		{
		}

		partial void begin_clicked (UIButton sender)
		{
		}

		partial void contacts_clicked (UIButton sender)
		{
		}

		partial void myProfile_clicked (UIButton sender)
		{
		}

		partial void next_clicked (UIButton sender)
		{
		}

		public async override void ViewDidLoad() {
			base.ViewDidLoad ();

			lblImportantNoticeMessage.Text = "Important Notice Message";

			_labelScrollviewContainer = (UIScrollView)lblImportantNoticeMessage.Superview;

			_lblMessage = new UILabel (_labelScrollviewContainer.Frame);
			_lblMessage.TextColor = lblImportantNoticeMessage.TextColor;
			//_lblMessage.TextColor = UIColor.Red;
			_lblMessage.TextAlignment = lblImportantNoticeMessage.TextAlignment;
			_lblMessage.Font = lblImportantNoticeMessage.Font;

			_lblMessage.Text = lblImportantNoticeMessage.Text;

			_labelScrollviewContainer.AddSubview (_lblMessage);

			_lblMessageCloned = new UILabel (_labelScrollviewContainer.Frame);
			_lblMessageCloned.TextColor = _lblMessage.TextColor;
			//_lblMessageCloned.TextColor = UIColor.Red;
			_lblMessageCloned.TextAlignment = _lblMessage.TextAlignment;
			_lblMessageCloned.Font = _lblMessage.Font;

			_lblMessageCloned.Text = _lblMessage.Text;

			_labelScrollviewContainer.AddSubview (_lblMessageCloned);

			lblImportantNoticeMessage.RemoveFromSuperview ();



//			var isRegistered = await MyHealthDB.ServiceConsumer.CheckRegisteredDevice ();
//			if (!isRegistered) {
//				_alert.Clicked += async (object sender, UIButtonEventArgs e) => {
//					// no internet connection leads in exit of application
//					NSThread.Exit ();
//				};
//				var isInternetAvailable = await HelperMethods.CheckIfInternetAvailable ();
//				if (!isInternetAvailable) {
//					_alert.Show ();
//				}
//				isRegistered = await MyHealthDB.ServiceConsumer.RegisterDevice ("iOS");
//				if (!isRegistered) {
//					_alert.Message = "Unable to register device, please try again later";
//					_alert.Show ();
//				}
//			}


			await LogManager.Log<LogUsage> (new LogUsage () { 
				Date = DateTime.Now, 
				Page = Convert.ToInt32 (Pages.Home)
			});

			await this.SetupImportantNotice ();
		}

		public override void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);

			if (_labelWidth > 0) {
				BeginScroll ();
			}
		}

		public override void ViewWillDisappear (bool animated)
		{
			base.ViewWillDisappear (animated);

			_labelScrollviewContainer.Layer.RemoveAllAnimations ();
		}

		partial void goBack (UIButton sender)
		{
			this.NavigationController.PopViewController(true);
		}

		async public Task SetupImportantNotice(bool startScroll = false) {
			var importantNotice = await DatabaseManager.SelectImportantNotice(DateTime.Now.Date);
			if (importantNotice != null) {
				//importantNotice.Name = "The quick brown fox jumps over the lazy dog, it is very very long and lengthy text for testing if it worked fine or not lets see...";

				// get the text width
				_labelWidth = importantNotice.Name.StringSize (_lblMessage.Font).Width;
				// if calculated width is less than the screen width then set it to screen width
				if (_labelWidth < _labelScrollviewContainer.Frame.Width) {
					_labelWidth = _labelScrollviewContainer.Frame.Width;
				}
				// add a margin of 20 points
				_labelWidth += 20;

				// set scrollview content size to the double of the text width
				_labelScrollviewContainer.ContentSize = new CGSize(_labelWidth * 2, _labelScrollviewContainer.Frame.Height);
				_labelScrollviewContainer.ContentOffset = new CGPoint (0, 0);
				// change the frame of the label to accomodate the long text
				var frameOrignal = new CGRect (0, 0, _labelWidth, _labelScrollviewContainer.Frame.Height);
				_lblMessage.Frame = frameOrignal;
				// set the cloned label frame
				_lblMessageCloned.Frame = new CGRect (frameOrignal.Width, frameOrignal.Location.Y, frameOrignal.Width, frameOrignal.Height);

				_lblMessage.Text = importantNotice.Name;
				_lblMessageCloned.Text = _lblMessage.Text;

				if (!String.IsNullOrEmpty (importantNotice.NoticeColor)) {
					var hexValue = Convert.ToInt32 (importantNotice.NoticeColor.Trim ().TrimStart ('#'), 16);
					_labelScrollviewContainer.BackgroundColor = UIColor.FromRGB (
						(((float)((hexValue & 0xFF0000) >> 16)) / 255.0f),
						(((float)((hexValue & 0xFF00) >> 8)) / 255.0f),
						(((float)(hexValue & 0xFF)) / 255.0f)
					);
				}

				if (startScroll)
				{
					this.BeginScroll ();
				}
			}
			else
			{
				_lblMessage.Text = "Important Notice";
				_lblMessage.TextAlignment = UITextAlignment.Center;

				// get the text width
				_labelWidth = _lblMessage.Text.StringSize (_lblMessage.Font).Width;
				// if calculated width is less than the screen width then set it to screen width
				if (_labelWidth < _labelScrollviewContainer.Frame.Width) {
					_labelWidth = _labelScrollviewContainer.Frame.Width;
				}
				var frameOrignal = new CGRect(0, 0, _labelWidth, _labelScrollviewContainer.Frame.Height);
				_lblMessage.Frame = frameOrignal;

				_labelWidth = 0;
			}
		}

		private void BeginScroll () {
			// clear any animations attached previously to avoid any conflict
//			_labelScrollviewContainer.Layer.RemoveAllAnimations ();

			var animDuration = (_labelWidth / 320) * 5;

//			UIView.BeginAnimations ("ImportantNoticeAnimation");
//			UIView.SetAnimationCurve (UIViewAnimationCurve.Linear);
//
//			UIView.SetAnimationDuration (animDuration);
//			UIView.SetAnimationRepeatCount (1);
//			UIView.SetAnimationDelegate (this);
//
//			UIView.SetAnimationDidStopSelector ( new Selector ("slideAnimationFinished:"));
//
//			_labelScrollviewContainer.ContentOffset = new CGPoint (_labelWidth, 0);
//
//			UIView.CommitAnimations ();

			_labelScrollviewContainer.ContentOffset = new CGPoint (0, 0);

			UIView.Animate (animDuration, 0.0, UIViewAnimationOptions.CurveLinear | UIViewAnimationOptions.Repeat,
				() => {
					_labelScrollviewContainer.ContentOffset = new CGPoint (_labelWidth, 0);
				},
				() => {
					if (this.NavigationController.VisibleViewController == this) {
						_labelScrollviewContainer.ContentOffset = new CGPoint (0, 0);
						this.BeginScroll();
					}
				}
			);
		}

//		[Export("slideAnimationFinished:")]
//		void ScrollFinished(Boolean finished) {
//			// jump to scroll start and then
//			_labelScrollviewContainer.ContentOffset = new CGPoint (0, 0);
//			// scroll it again
//			this.BeginScroll ();
//		}
	}
}
