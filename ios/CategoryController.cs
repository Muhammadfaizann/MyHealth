// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Linq;

using Foundation;
using UIKit;
using MyHealthDB;
using MyHealthDB.Logger;
using System.Threading.Tasks;

namespace RCSI
{
	public partial class CategoryController : UIViewController
	{
		public Disease _selectedDisease { get; set; }

		public CategoryController (IntPtr handle) : base (handle)
		{
		}

		public async override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			var categorySearchSource = new CategorySearchSource (this, this.tableView);
			await categorySearchSource.updateData();
			this.tableView.Source = categorySearchSource;
			this.tableView.ReloadData ();
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);

			var controller = segue.DestinationViewController as IllnessDetailsController;
			if (controller != null) 
			{
				controller.SelectedDisease = _selectedDisease;
			}		
		}
	}

	public class CategorySearchSource : UITableViewSource
	{
		//public String[] _items = {"Obesity", "Depression", "Heart Attack", "Heart Bypass", "Heart Failure", "Heart Murmurs", "Heart Valve Infection",
		//	"Diabeties", "Asthma", "Appendicitis", "Baby acne", "Burns", "Cold sores", "Dementia"};
		private UITableView _tableView;
		private List<nint> _collapsedSections;
		CategoryController _controller;
		private CommonData model = new CommonData();

		public Dictionary<String, Disease[]> Items = new Dictionary<string, Disease[]>();
		public Dictionary<String, Disease[]> dictForLog = new Dictionary<string, Disease[]>();
//		{
//			{"Cancer", new String[] {"Breast Cancer", "Colon Cancer"}},
//		    {"Diabeties", new String[] {}},
//			{"Heart Diseases", new String[] {"Heat Attack", "Heart Bypass", "Heart Murmurs"}},
//			{"Obesity", new String[] {}}
//		};



		public CategorySearchSource (CategoryController controller, UITableView tableView)
		{
			_controller = controller;
			_tableView = tableView;
		}

		public async Task updateData() 
		{
//			var items = await model.GetAllDiseases ();
//			var indexTitles = await model.GetAllDiseasesCategory ();
//			var diseaseForCategory = await model.GetAllDiseasesForCategory ();

			var diseases = await model.GetAllDiseases ();
			var categories = await model.GetAllCategory ();
			var diseaseForCategory = await model.GetAllDiseasesForCategory ();

			foreach (var category in categories) {
				//found diseases string against this category
				string ids = diseaseForCategory.FirstOrDefault (x => x.CategoryId == category.ID).ConditionId;
				//split that string to integer array.
				int[] diseaseIDs = ids.Split (new String[]{ "," }, StringSplitOptions.RemoveEmptyEntries).Select( x => Convert.ToInt32(x)).ToArray();

				var foundItems = diseases.Where (i => diseaseIDs.Contains (i.ID.Value)).ToList (); // here you have the diseases on the selected category.
				var diseaseId = diseases.Where (i => diseaseIDs.Contains (i.ID.Value)).Select(x => x.ID).ToList (); // here you have the diseases on the selected category.

				if (foundItems != null && foundItems.Count() > 0) {
					Items.Add (category.CategoryName, foundItems.ToArray());
					//dictCatergoryConditionIds.Add (category.ID.ToString(), diseaseId);
				} else {
					if (!Items.ContainsKey (category.CategoryName)) {
						Items.Add (category.CategoryName, new List<Disease> ().ToArray ());
					}
					//dictCatergoryConditionIds.Add (category.ID.ToString(), new List<int?>());
				}
			}

//			foreach (var diseaes in indexTitles) {
//				var foundItems = items.Where (i => i.DiseaseCategoryID == diseaes.ID).ToArray ();
//
//				if (foundItems != null && foundItems.Count() > 0) {
//					Items.Add (string.Format (" {0} ", diseaes.CategoryName), foundItems);
//				} else {
//					Items.Add (string.Format (" {0} ", diseaes.CategoryName), new Disease[]{});
//				}
//
//				var found = items.Where (i => i.DiseaseCategoryID == diseaes.ID).ToArray ();
//
//				if (found != null && found.Count() > 0) {
//					dictForLog.Add (string.Format (" {0} ", diseaes.CategoryName), found);
//				} else {
//					dictForLog.Add (string.Format (" {0} ", diseaes.CategoryName), new Disease[]{});
//				}
//			}


			_collapsedSections = new List<nint> ();
			for (int i = 0; i < Items.Keys.Count; i++) {
				_collapsedSections.Add (i);
			}
		}

		public void ToggleCollapsedSections(int section)
		{ 
			_collapsedSections.Add (section);
		}


		public override nint NumberOfSections (UITableView tableView)
		{
			return Items.Keys.Count;
		}

		public override nint RowsInSection (UITableView tableview, nint section)
		{
			if (_collapsedSections.Contains(section)) {
				return 0;
			}
			String key = Items.Keys.ToArray()[section];
			return Items [key].Count ();
		}

		/*public override string TitleForHeader (UITableView tableView, int section)
		{
			return Items.Keys.ElementAt (section);
		}*/

		public override nfloat GetHeightForHeader (UITableView tableView, nint section)
		{
			return 30;
		}

		public override UIView GetViewForHeader (UITableView tableView, nint section)
		{
			var cell = (CategoryHeaderTableViewCell) tableView.DequeueReusableCell ("HeaderCell");
			cell.UpdateCell (Items.Keys.ToArray()[section], Convert.ToInt16(section),_collapsedSections.Contains(section));
			cell.ToggleSectionEvent += ToggleSections;



			/*while (cell.TextLabel.GestureRecognizers.Count() > 0) {
				cell.TextLabel.RemoveGestureRecognizer (cell.TextLabel.GestureRecognizers [0]);
			}*/

			/*while (cell.GestureRecognizers.Count() > 0) {
				/*cell.RemoveGestureRecognizer (cell.GestureRecognizers [0]);
			}

			UITapGestureRecognizer recognizer = new UITapGestureRecognizer ();
			recognizer.Delegate = GestureDelegate;
			recognizer.AddTarget (() => ToggleSectionRows ());

			//cell.TextLabel.AddGestureRecognizer (recognizer);

			//UITapGestureRecognizer recognizer2 = new UITapGestureRecognizer (ToggleSectionRows);
			/*recognizer2.AddTarget (() =>
				ToggleSectionRows ()
			);*/

			//cell.AddGestureRecognizer (recognizer);*/

			//cell.ContentView.cli
		/*var btn = cell.ContentView.ViewWithTag (100) as UIButton;
			/*btn.Tag = section;
		btn.TouchUpInside += (object sender, EventArgs e) => {
		};*/
			return cell;
		}

		void cellTapped(object sender, EventArgs e)
		{

		}

		static String cellIdentifier = "illnessCatCell";
		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			UITableViewCell cell = null;
			cell = tableView.DequeueReusableCell (cellIdentifier);
			// if there are no cells to reuse, create a new one
			if (cell == null) {
				cell = new UITableViewCell (UITableViewCellStyle.Default, cellIdentifier);
				cell.Accessory = UITableViewCellAccessory.DisclosureIndicator;
			}
			cell.TextLabel.Text = Items [Items.Keys.ElementAt (indexPath.Section)] [indexPath.Row].Name;
			return cell;
		}

		public NSIndexPath[] GetIndexPaths(Int32 section, Int32 numberOfRows)
		{
			List<NSIndexPath> indexPaths = new List<NSIndexPath> ();

			for (int count = 0; count < numberOfRows; count++) {
				var iPath = NSIndexPath.FromRowSection (count, section);

				indexPaths.Add (iPath);
			}

			return indexPaths.ToArray();
		}

		private void ToggleSectionRows()
		{
		}

	public void ToggleSections(object sender, EventArgs e)
	{
			nint section = (nint)((UIButton)sender).Tag;
		if (_collapsedSections.Contains (section)) {
			_collapsedSections.Remove (section);
			} else {
				_collapsedSections.Add (section);
			}
			_tableView.ReloadData ();
	}



		/*public void ToggleSectionRows(UITapGestureRecognizer gestureRecognizer)
		{
			_tableView.BeginUpdates ();

			Int32 section = gestureRecognizer.View.Tag;
			if (_collapsedSections.Contains (section)) {
				_collapsedSections.Remove (section);

				Int32 nor = _tableView.NumberOfRowsInSection (section);
				var indexPaths = GetIndexPaths (section, nor);

				_tableView.InsertRows (indexPaths, UITableViewRowAnimation.Bottom);
			} else {
				Int32 nor = _tableView.NumberOfRowsInSection (section);
				var indexPaths = GetIndexPaths (section, nor);

				_tableView.DeleteRows (indexPaths, UITableViewRowAnimation.Top);

				_collapsedSections.Add (section);
			}

			_tableView.EndUpdates ();
		}*/

		public override async void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{
			var dis = Items [Items.Keys.ElementAt (indexPath.Section)] [indexPath.Row];
			await LogManager.Log (new LogContent { 
				Date = DateTime.Now,
				ConditionId = dis.ID,
				CategoryId = dis.DiseaseCategoryID
			});

			_controller._selectedDisease = dis;

		_controller.PerformSegue ("Details", tableView);
		tableView.DeselectRow (indexPath, true);
	}
	}

	/*public class GestureDelegate : UIGestureRecognizerDelegate
	{
	 	ToggleSectionDelegate ToggleSectionHandler; 
		int selectedHeader;

	public GestureDelegate (CategoryController controller, int selectedHeader)
		{
			this.controller = controller;
			this.selectedHeader = selectedHeader;
		}

		public override bool ShouldReceiveTouch(UIGestureRecognizer aRecogniser, UITouch aTouch)
		{
			return true;
		}	

		public void ToggleSections()
		{
			this.controller.tableView.Source;
		}
	}*/
}
