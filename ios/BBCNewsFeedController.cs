// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;
using System.Net;
using System.Xml;
using System.Collections.Generic;

using MonoTouch.Foundation;
using MonoTouch.UIKit;

namespace RCSI
{
	public partial class BBCNewsFeedController : UIViewController
	{
		private BBCNewsFeedSource _bbcNewsFeedSource;
		public BBCNewsFeedController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			_bbcNewsFeedSource = new BBCNewsFeedSource (this);
			this.tableView.Source = _bbcNewsFeedSource;
			this.tableView.ClipsToBounds = true;
			this.tableView.SeparatorStyle = UITableViewCellSeparatorStyle.None;

		}
	}

	public class BBCNewsFeedSource : UITableViewSource
	{
		List<FeedItem> _feedItemList = RSSManager.ReadRSSFeed ("http://feeds.bbci.co.uk/news/health/rss.xml?edition=uk#");
		BBCNewsFeedController _controller;
		public BBCNewsFeedSource (BBCNewsFeedController controller)
		{
			_controller = controller;
		}

		public override int NumberOfSections (UITableView tableView)
		{
			return 1;
		}

		public override int RowsInSection (UITableView tableView, int section)
		{
			return _feedItemList.Count;
		}
		//-- generate apk file
		static String cellIdentifier = "NewsCell";
		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			UITableViewCell cell = null;
			cell = tableView.DequeueReusableCell (cellIdentifier);
			// if there are no cells to reuse, create a new one
			if (cell == null) {
				cell = new UITableViewCell (UITableViewCellStyle.Default, cellIdentifier);
				//cell.Accessory = UITableViewCellAccessory.DisclosureIndicator;
			}
			cell.Layer.CornerRadius = 30.0f;
			cell.Layer.BorderWidth = 1.5f;
			cell.Layer.MasksToBounds = true;
			cell.Layer.BorderColor = UIColor.FromRGB(233,239,239).CGColor;
			cell.BackgroundColor = UIColor.FromRGB(233,239,239);
			cell.IndentationWidth = 2.0f;
			((UILabel)cell.ViewWithTag (100)).Text = Math.Round(DateTime.Now.Subtract(_feedItemList [indexPath.Row].PubDate).TotalHours).ToString() + " hours ago";
			((UILabel)cell.ViewWithTag (100)).TextColor = UIColor.Gray;
			((UITextView)cell.ViewWithTag (101)).Text = _feedItemList [indexPath.Row].Title;
			((UITextView)cell.ViewWithTag (101)).TextColor = UIColor.FromRGB (72, 95, 98);
			((UITextView)cell.ViewWithTag (101)).BackgroundColor = UIColor.FromRGB (233, 239, 239);
			((UITextView)cell.ViewWithTag (102)).Text = _feedItemList [indexPath.Row].Description;
			((UITextView)cell.ViewWithTag (102)).TextColor = UIColor.FromRGB (160, 160, 160);
			((UITextView)cell.ViewWithTag (102)).BackgroundColor = UIColor.FromRGB (233, 239, 239);
			NSUrl nsUrl = new NSUrl(_feedItemList [indexPath.Row].ImageUrl);
			NSData data = NSData.FromUrl(nsUrl);
			try {
				var myImage = new UIImage(data); 
				((UIImageView)cell.ViewWithTag (103)).Image = myImage;
			} catch (Exception ex) {
				Console.WriteLine ("Image Loaded Exception : {0}", ex.ToString());
			}
			return cell;
		}

		public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{
			string url = _feedItemList [indexPath.Row].Link;

			UIAlertView alert = new UIAlertView ("Alert", "you will now be redirected to an external website, Do you want to Proceed?", null, "OK", new string[] {"Cancel"});
			alert.Clicked += (s, b) => {
				if(b.ButtonIndex == 0)
					// open in Safari
					UIApplication.SharedApplication.OpenUrl(new NSUrl(url));
				// return false so the UIWebView won't load the web page
			};
			alert.Show();

			//_controller.HideKeyboard ();
			//_controller.PerformSegue ("Details", tableView);
			tableView.DeselectRow (indexPath, true);
		}
	}

	public class FeedItem  { 

		public FeedItem() { }

		public string Title { get; set; }
		public string Link { get; set; }
		public DateTime PubDate { get; set; }
		public string ImageUrl { get; set; }
		public string Description { get; set; }
	}

	public class RSSManager
	{

		public static List<FeedItem> ReadRSSFeed(String url)
		{ 
			List<FeedItem> feedItemsList = new List<FeedItem>();
			try
			{
				WebRequest webRequest = WebRequest.Create(url);
				WebResponse webResponse = webRequest.GetResponse();
				Stream stream = webResponse.GetResponseStream();
				XmlDocument xmlDocument = new XmlDocument();
				xmlDocument.Load(stream);
				XmlNamespaceManager nsmgr = new XmlNamespaceManager(xmlDocument.NameTable);
				nsmgr.AddNamespace("media", xmlDocument.DocumentElement.GetNamespaceOfPrefix("media"));
				XmlNodeList itemNodes = xmlDocument.SelectNodes("rss/channel/item");

				for (int i = 0; i < itemNodes.Count; i++)
				{
					FeedItem feedItem = new FeedItem();

					if (itemNodes[i].SelectSingleNode("title") != null)
					{
						feedItem.Title = itemNodes[i].SelectSingleNode("title").InnerText;
					}
					if (itemNodes[i].SelectSingleNode("link") != null)
					{
						feedItem.Link = itemNodes[i].SelectSingleNode("link").InnerText;
					}
					if (itemNodes[i].SelectSingleNode("pubDate") != null)
					{
						feedItem.PubDate = Convert.ToDateTime(itemNodes[i].SelectSingleNode("pubDate").InnerText);
					}
					if ((itemNodes[i].SelectNodes("media:thumbnail", nsmgr)[0]).Attributes["url"].Value != null)
					{
						feedItem.ImageUrl = (itemNodes[i].SelectNodes("media:thumbnail", nsmgr)[0]).Attributes["url"].Value;
					}
					if (itemNodes[i].SelectSingleNode("description") != null)
					{
						feedItem.Description = itemNodes[i].SelectSingleNode("description").InnerText;
					}

					feedItemsList.Add(feedItem);
				}
			}
			catch (Exception)
			{
				throw;
			}

			return feedItemsList;		
		}
	}
}
