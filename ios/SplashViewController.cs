// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using CoreGraphics;


namespace RCSI
{
	public partial class SplashViewController : UIViewController
	{
		//Boolean DatabaseExists;
		NetworkStatus remoteHostStatus, internetStatus, localWifiStatus;
		protected LoadingOverlay loadingOverlay = null;

		public SplashViewController (IntPtr handle) : base (handle)
		{
		}

		public async override void ViewDidLoad ()
		{
			
			base.ViewDidLoad ();
			//string Harry1 = "Harry";
			if (!UIDevice.CurrentDevice.Model.Contains("iPad")) {
				var bounds = UIScreen.MainScreen.Bounds; // portrait bounds
				this.loadingOverlay = new LoadingOverlay (bounds);
				this.View.Add (this.loadingOverlay);
			}
			//bool isAgree = NSUserDefaults.StandardUserDefaults.BoolForKey ("Agree");
//			if (isAgree) {
//				//PerformSegue ("Home", this);
//			}
//			DatabaseExists = NSUserDefaults.StandardUserDefaults.BoolForKey ("DatabaseExists");

			remoteHostStatus = Reachability.RemoteHostStatus ();
			internetStatus = Reachability.InternetConnectionStatus ();
			localWifiStatus = Reachability.LocalWifiConnectionStatus ();

			var connected = (remoteHostStatus != NetworkStatus.NotReachable) && (internetStatus != NetworkStatus.NotReachable) || (localWifiStatus != NetworkStatus.NotReachable);

			UIApplication.SharedApplication.NetworkActivityIndicatorVisible = true;
            UIAlertView _alert = new UIAlertView(); //null, , null, "Ok", null);
            _alert.Message = "Internet is not accessible, please check your device settings and try again";
            _alert.AddButton("Ok");
            _alert.CancelButtonIndex = 0;
			_alert.Clicked += (object sender, UIButtonEventArgs e) => {
				// no internet connection leads in exit of application
				//NSThread.Exit ();
				exit(0);
			};
			var userDefs = NSUserDefaults.StandardUserDefaults;

			await MyHealthDB.ServiceConsumer.CreateDatabase ();
			DateTime LastSyncDate = DateTime.Now;
			if (await MyHealthDB.ServiceConsumer.CheckRegisteredDevice ()) {
				string strLastSyncDate = userDefs.StringForKey ("LastSyncDate");
				if (!string.IsNullOrEmpty (strLastSyncDate)) {
					LastSyncDate = Convert.ToDateTime (strLastSyncDate);
					double TotalHours = DateTime.Now.Subtract (LastSyncDate).TotalHours;
					if (TotalHours > 24) {
						if (connected) {
							// this line is not awaited therefore control will transfer to the next line immediately before SyncDevice method completes execution
							MyHealthDB.ServiceConsumer.SyncDevice ().ContinueWith ((t) => {
								if (t.Result) {
									userDefs.SetString (DateTime.Now.ToString ("dd-MMM-yyyy HH:mm:ss"), "LastSyncDate");
									userDefs.SetString (DateTime.Now.ToString ("dd-MMM-yyyy HH:mm:ss"), "ConditionsLastSyncDate");
									userDefs.SetString (DateTime.Now.ToString ("dd-MMM-yyyy HH:mm:ss"), "HospitalsLastSyncDate");
									userDefs.Synchronize ();
								}
								UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
							});
						} else {
							UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
						}
					} else {
						UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
					}
					if (UIDevice.CurrentDevice.Model != "iPad") {
						loadingOverlay.Hide ();
					}
					ShowAcceptanceDialog ();
				} else {
					if (connected) {
						var isSyncSuccessful = await MyHealthDB.ServiceConsumer.FirstTimeSyncDevice ();
						//var isSyncSuccessful = await MyHealthDB.ServiceConsumer.SyncDevice (LastSyncDate);
						if (!isSyncSuccessful) {
							_alert.Message = "Unable to Sync device with server, please try again later";
							_alert.Show ();
						} else {
							userDefs.SetString (DateTime.Now.ToString ("dd-MMM-yyyy HH:mm:ss"), "LastSyncDate");
							userDefs.Synchronize ();
							if (UIDevice.CurrentDevice.Model != "iPad") {
								loadingOverlay.Hide ();
							}
							ShowAcceptanceDialog ();
						}
					} else {
						if (UIDevice.CurrentDevice.Model != "iPad") {
							loadingOverlay.Hide ();
						}
						ShowConnectivityDialog ();
					}

					UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
				}
			}	// end if device-registered
			else {
				// device is not registered
				// so handle first-time use
				if (connected) {
					string OSVer = UIDevice.CurrentDevice.SystemVersion;
					string OSVersion = OSVer.Replace (".", "-");
					// registering device with the system
					if (await MyHealthDB.ServiceConsumer.RegisterDevice ("iPhone", OSVersion)) {
						// first time sync device
						var isSyncSuccessful = await MyHealthDB.ServiceConsumer.FirstTimeSyncDevice ();
						//var isSyncSuccessful = await MyHealthDB.ServiceConsumer.SyncDevice();
						//var isSyncSuccessful = await MyHealthDB.ServiceConsumer.SyncDevice (LastSyncDate);
						if (!isSyncSuccessful) {
							_alert.Message = "Unable to Sync device with server, please try again later";
							_alert.Show ();
						} else {
							userDefs.SetString (DateTime.Now.ToString ("dd-MMM-yyyy HH:mm:ss"), "LastSyncDate");
							userDefs.Synchronize ();

							ShowAcceptanceDialog ();
						}
					}
				} else {
					ShowConnectivityDialog ();
				}
				UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
			}
		}

		public override void ViewDidAppear (bool animated)
		{
			base.ViewDidAppear (animated);
		}
		[System.Runtime.InteropServices.DllImport("__Internal", EntryPoint = "exit")]
		public static extern void exit(int status);

		//------------------------ Get Device ID --------------------//
		private void ShowAcceptanceDialog() {
			bool isAgree = NSUserDefaults.StandardUserDefaults.BoolForKey ("Agree");
			if (!isAgree) {
				UIAlertView dialog = new UIAlertView ();
				dialog.Title = "Accept Terms of Use";
				dialog.AddButton ("Don't Agree");
				dialog.AddButton ("Agree");
				dialog.AddButton ("Read Our T&Cs");
				dialog.CancelButtonIndex = 0;

				dialog.Clicked += (object sender, UIButtonEventArgs e) => {

					switch (e.ButtonIndex) {
					case 0:
						// don't agree leads in exit of application
	//					NSThread.Exit();
						exit (0);
	//					NSThread.MainThread.Exit(0);
						break;
					case 1:
						NSUserDefaults defs = NSUserDefaults.StandardUserDefaults;
						defs.SetBool (true, "Agree");
						defs.Synchronize ();
						PerformSegue ("Home", this);
						break;
					case 2:
						UIApplication.SharedApplication.OpenUrl (new NSUrl ("http://rcsimyhealth.ie/terms-and-conditions.html"));
						exit (0);
						break;
					}
				};

				dialog.Show ();
			} else {
				PerformSegue ("Home", this);
			}

		}
		

		private void ShowConnectivityDialog () {
			UIAlertView dialog = new UIAlertView ();
			dialog.Title = "Connectivity Check";
			dialog.Message = "Please make sure, Your device in connected to internet.";
			dialog.AddButton ("Ok");

			dialog.Clicked += (object sender, UIButtonEventArgs e) => {
				// don't agree leads in exit of application
				//NSThread.Exit();
				exit(0);
			};

			dialog.Show ();
		}

		//------------------------ Get Device ID --------------------//
		private string GetDeviceID ()
		{
			return "";
		}

		public void OpenWebSite(object sender, EventArgs e)
		{
			UIApplication.SharedApplication.OpenUrl (new NSUrl ("http://rcsimyhealth.ie/terms-and-conditions.html"));
		}
	}
}
