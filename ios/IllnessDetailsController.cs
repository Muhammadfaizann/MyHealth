// This file has been autogenerated from a class added in the UI designer.

using System;
using System.IO;

using Foundation;
using UIKit;
using System.Threading.Tasks;

using MyHealthDB;
using MyHealthDB.Logger;

namespace RCSI
{
	public enum DiseaseList{ HeartAttack, LungCancer };
	public partial class IllnessDetailsController : UIViewController
	{
		public Disease SelectedDisease;
		public Int32 SelectedDiseaseId{ get; set; }

		public IllnessDetailsController (IntPtr handle) : base (handle)
		{
		}

		public async override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			HelperMethods.AddRecentDisease (SelectedDisease);

			this.Title = SelectedDisease.Name;
			var htmlString = await MyHealthDB.Helper.Helper.BuildHtmlForDisease (SelectedDisease.ID.Value);

			String fileName = "";
			/*if (SelectedDisease.Equals (DiseaseList.LungCancer)) 
			{
				this.Title = "Lung Cancer";
				fileName = "Content/LungCancer.html";
				this.imageView.Image = UIImage.FromBundle ("images/Cancer.png");
			}*/

			var selectedCpUser = await DatabaseManager.SelectCpUser (SelectedDisease.CPUserId);
			if (selectedCpUser != null) {
				try {
					if (selectedCpUser.CharityLogo != null && selectedCpUser.CharityLogo.Length > 0) {
						this.imageView.Image = UIImage.LoadFromData (NSData.FromArray (selectedCpUser.CharityLogo));
					}
				} catch (Exception ex) {
					Console.WriteLine ("Image Load Exception : {0}", ex.ToString());
				}
			}
			else 
			{
				this.Title = "Heart Attack";
				fileName = "Content/Heart.html";
				this.imageView.Image = UIImage.FromBundle ("images/ihf.png");
			}
			if (!string.IsNullOrEmpty (htmlString)) {
				webView.LoadHtmlString (htmlString, NSBundle.MainBundle.BundleUrl);
			} else {
				String localHtmlUrl = Path.Combine (NSBundle.MainBundle.BundlePath, fileName);
				webView.LoadRequest (new NSUrlRequest (new NSUrl (localHtmlUrl, false)));
			}
			webView.ScalesPageToFit = false;
			webView.ShouldStartLoad = HandleShouldStartLoad;
		}

		public bool HandleShouldStartLoad(UIWebView webView, NSUrlRequest request, UIWebViewNavigationType navigationType)
		{
			// you need to implement this method depending on your criteria
			if (navigationType.Equals(UIWebViewNavigationType.LinkClicked))
			{

				UIAlertView alert = new UIAlertView ("Alert", "This link will take you to an external website, Do you want to Proceed?", null, "OK", new string[] {"Cancel"});
				alert.Clicked += (s, b) => {
					if(b.ButtonIndex == 0) {
						LogManager.Log<LogExternalLink> (new LogExternalLink (){ 
							Date = DateTime.Now, 
							Link = request.Url.AbsoluteString 
						});
						// open in Safari
						UIApplication.SharedApplication.OpenUrl(request.Url);
					}
					// return false so the UIWebView won't load the web page
				};
				alert.Show();

				return false;
			}

			// this.OpenInExternalBrowser(request) returned false -> let the UIWebView load the request
			return true;
		}
	}
}
