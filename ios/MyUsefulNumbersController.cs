// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections;
using System.Collections.Generic;
using Foundation;
using UIKit;
using System.IO;
using System.Linq;
using MyHealthDB;
using MyHealthDB.Logger;

using System.Threading.Tasks;

namespace RCSI
{
	public partial class MyUsefulNumbersController : UIViewController
	{
		private MyUsefulNumberSource _myUsefulNumberSource;
		public List<UsefullNumbers> _numberList;

		public MyUsefulNumbersController (IntPtr handle) : base (handle)
		{
		}

		public async override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			await LogManager.Log<LogUsage> (new LogUsage (){
				Date = DateTime.Now,
				Page = Convert.ToInt32(Pages.MyUsefulNumbers)
			});
			//_numberList = DataService.LoadNumbers();
			_numberList = await MyHealthDB.DatabaseManager.SelectAllUsefullNumbers ();

			if (_numberList.Count <= 0) {
				await MyHealthDB.DatabaseManager.SaveUsefullNumber (new UsefullNumbers { 
					ID = 0,
					Name = "My GP",
					Number = ""
				});

				await MyHealthDB.DatabaseManager.SaveUsefullNumber (new UsefullNumbers { 
					ID = 1,
					Name = "My Dentist", 
					Number = ""
				});

				await MyHealthDB.DatabaseManager.SaveUsefullNumber (new UsefullNumbers { 
					ID = 2,
					Name = "My Health Insurer", 
					Number = ""
				});
				await MyHealthDB.DatabaseManager.SaveUsefullNumber (new UsefullNumbers { 
					ID = 3,
					Name = "My Garda Station",
					Number = ""
				});
				await MyHealthDB.DatabaseManager.SaveUsefullNumber (new UsefullNumbers { 
					ID = 4,
					Name = "My Pharmacy",
					Number = ""
				});
				await MyHealthDB.DatabaseManager.SaveUsefullNumber (new UsefullNumbers { 
					ID = 5,
					Name = "My Public Health Nurse",
					Number = ""
				});
				_numberList = await MyHealthDB.DatabaseManager.SelectAllUsefullNumbers ();
			}

			_myUsefulNumberSource = new MyUsefulNumberSource (this);
			this.tableView.Source = _myUsefulNumberSource;
			this.tableView.ReloadData ();

//			btnSave.TouchUpInside += async (object sender, EventArgs e) => {
//				await SaveNumbers(sender, e);
//			};



			//this.btnAddNumber.TouchUpInside += async (s, e) => {
			//	ModalAddNumberController yourController = new ModalAddNumberController();

			//	yourController.ModalPresentationStyle = UIModalPresentationStyle.FormSheet;
			//	this.PresentViewController(yourController, true, null);
			//};

			//this.btnAddNumber.TouchUpInside += async (s, e) => {
			//	ModalAddNumberController modalController = new ModalAddNumberController();
			//	modalController.ModalPresentationStyle = UIModalPresentationStyle.FormSheet;
			//	await this.PresentViewControllerAsync(modalController, true);
			//};
		}

//		async private Task SaveNumbers(object sender, EventArgs e)
//		{
//			foreach (UsefullNumbers number in _numberList) {
//				if (number.ID == null) {
//					number.ID = _numberList.Max (x => x.ID) + 1;
//				}
//				await MyHealthDB.DatabaseManager.SaveUsefullNumber (number);
//			}
//			UIAlertView _message = new UIAlertView ("", "Saved Successfully!", null, "OK", null);
//			_message.Show ();
//		}

		async public Task NumberAdded(string title, string number)
		{
			/*this._numberList.Add(new UsefullNumbers (){
				Name = title,
				Number = number
			});*/

			_numberList = await MyHealthDB.DatabaseManager.SelectAllUsefullNumbers ();
			this.tableView.ReloadData ();
		}

		public void NumberEdited(string title, string number, int rowIndex)
		{
			this._numberList[rowIndex].Name = title;
			this._numberList[rowIndex].Number = number;
			this.tableView.ReloadData ();
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);
			if (segue.Identifier == "ModalAddNumberSegue") 
			{
				var controller = segue.DestinationViewController as ModalAddNumberController;

				if (controller != null) 
				{
					controller.NumberAddedHandler = NumberAdded;
				}
			}

			if (segue.Identifier == "ModalEditNumberSegue") 
			{
				var controller = segue.DestinationViewController as ModalAddNumberController;

				if (controller != null) 
				{
					int editIndex = Convert.ToInt32(((UIButton)sender).Title(UIControlState.Normal));
					controller.EditRowIndex = editIndex;
					controller.EditTitle = this._numberList [editIndex].Name;
					controller.EditNumber = this._numberList [editIndex].Number;
					controller.NumberEditedHandler = NumberEdited;

					controller.NumberID = this._numberList [editIndex].ID.Value;
				}
			}
		}
	}

	public class MyUsefulNumberSource : UITableViewSource
	{
		MyUsefulNumbersController _controller;
		public MyUsefulNumberSource (MyUsefulNumbersController controller)
		{
			_controller = controller;
		}

		public override nint NumberOfSections (UITableView tableView)
		{
			return 1;
		}

		public override nint RowsInSection (UITableView tableView, nint section)
		{
			return _controller._numberList.Count;
		}

		static String cellIdentifier = "NumberCell";
		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			UsefullNumbers item;
			item = _controller._numberList [indexPath.Row];

			NumberTableViewCell cell = null;
			cell = tableView.DequeueReusableCell (cellIdentifier) as NumberTableViewCell;
			// if there are no cells to reuse, create a new one
			if (cell == null) {
				cell = new NumberTableViewCell (UITableViewCellStyle.Default, cellIdentifier);
				cell.Accessory = UITableViewCellAccessory.DisclosureIndicator;
			}

			cell.UpdateCell (item,indexPath.Row);

			return cell;
		}

		public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{
				//.HideKeyboard ();
			//_controller.PerformSegue ("Details", tableView);
			//tableView.DeselectRow (indexPath, true);
		}

	}



//	public static class DataService
//	{
//		public static void SaveNumbers(List<MyUsefulNumbers> numbersList)
//		{
//			var documentsPath = Environment.GetFolderPath (Environment.SpecialFolder.Personal);
//			var filePath = Path.Combine (documentsPath, "MyUsefulNumbers.xml");
//			WriteXML (numbersList,filePath);
//
//			//for (int row = 0; row < tableView.NumberOfRowsInSection (0); row++) 
//			//{
//			//	NSIndexPath indexPath = NSIndexPath.FromRowSection (row, 0);
//			//	UITableViewCell cell = tableView.CellAt (indexPath);
//			//	string Title = ((UILabel)cell.ViewWithTag (100)).Text;
//			//	string Number = ((UITextField)cell.ViewWithTag (101)).Text;
//
//			//}
//		}
//
//		public static List<MyUsefulNumbers> LoadNumbers()
//		{
//			var documentsPath = Environment.GetFolderPath (Environment.SpecialFolder.Personal);
//			var filePath = Path.Combine (documentsPath, "MyUsefulNumbers.xml");
//
//			List<MyUsefulNumbers> _numbers = ReadXML(filePath);
//			if (_numbers == null) 
//			{
//				_numbers = new List<MyUsefulNumbers> ();
//				_numbers.Add (new MyUsefulNumbers ("My GP", ""));
//				_numbers.Add (new MyUsefulNumbers ("My Dentist", ""));
//				_numbers.Add (new MyUsefulNumbers ("My Health Insurer", ""));
//				_numbers.Add (new MyUsefulNumbers ("My Garda Station", ""));
//				_numbers.Add (new MyUsefulNumbers ("My Pharmacy", ""));
//				_numbers.Add (new MyUsefulNumbers ("My Public Health Nurse", ""));
//			}
//			return _numbers;
//		}
//
//
//		private static List<MyUsefulNumbers> ReadXML(string filePath)
//		{
//			List<MyUsefulNumbers> numberList = null;
//			if (File.Exists (filePath)) 
//			{
//				System.Xml.Serialization.XmlSerializer reader = 
//					new System.Xml.Serialization.XmlSerializer (typeof(List<MyUsefulNumbers>));
//				System.IO.StreamReader file = new System.IO.StreamReader (filePath);
//
//				numberList = (List<MyUsefulNumbers>)reader.Deserialize (file);
//				file.Close ();
//			}
//			return numberList;
//		}
//
//		private static void WriteXML(List<MyUsefulNumbers> numberList, string filePath)
//		{
//			System.Xml.Serialization.XmlSerializer writer = 
//				new System.Xml.Serialization.XmlSerializer(typeof(List<MyUsefulNumbers>));
//
//			System.IO.StreamWriter file = new System.IO.StreamWriter(filePath);
//			writer.Serialize(file, numberList);
//			file.Close();
//		}
//	}
//
//	public class MyUsefulNumbers
//	{
//		public string Title { get; set; }
//		public string Number { get; set; }
//
//		public MyUsefulNumbers()
//		{
//		}
//
//		public MyUsefulNumbers(string title,string number)
//		{
//			Title = title;
//			Number = number;
//		}
//	}

}
