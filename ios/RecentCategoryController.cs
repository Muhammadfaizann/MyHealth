// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;

using System.Collections.Generic;

using MyHealthDB;
using MyHealthDB.Logger;

namespace RCSI
{
	public partial class RecentCategoryController : UIViewController
	{
		public Disease _selectedDisease { get; set; }

		public RecentCategoryController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			this.tableView.Source = new RecentCategorySource (this);
			this.tableView.ReloadData ();
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);

			var controller = segue.DestinationViewController as IllnessDetailsController;
			if (controller != null) 
			{
				controller.SelectedDisease = _selectedDisease;
			}		
		}
	}

	public class RecentCategorySource : UITableViewSource
	{
		//public String[] _items = {"Obesity", "Depression", "Heart Attack", "Heart Bypass", "Heart Failure", "Heart Murmurs", "Heart Valve Infection",
		//	"Diabeties", "Asthma", "Appendicitis", "Baby acne", "Burns", "Cold sores", "Dementia"};

		public List<Disease> _items;

		RecentCategoryController _controller;
		public RecentCategorySource (RecentCategoryController controller)
		{
			_controller = controller;

			_items = HelperMethods.RecentDiseases;
		}

		public override nint NumberOfSections (UITableView tableView)
		{
			return 1;
		}

		public override nint RowsInSection (UITableView tableView, nint section)
		{
			return _items.Count;
		}

		static String cellIdentifier = "RecentCategoryCell";
		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			String item;
			item = _items [indexPath.Row].Name;

			UITableViewCell cell = null;
			cell = tableView.DequeueReusableCell (cellIdentifier);
			// if there are no cells to reuse, create a new one
			if (cell == null) {
				cell = new UITableViewCell (UITableViewCellStyle.Default, cellIdentifier);
				cell.Accessory = UITableViewCellAccessory.DisclosureIndicator;
			}
			cell.TextLabel.Text = item;
			return cell;
		}

		async public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{
			var dis = _items [indexPath.Row];
			await LogManager.Log (new LogContent { 
				Date = DateTime.Now,
				ConditionId = dis.ID,
				CategoryId = dis.DiseaseCategoryID
			});

			_controller._selectedDisease = dis;

			_controller.PerformSegue ("Details", tableView);
			tableView.DeselectRow (indexPath, true);
		}
	}
}
