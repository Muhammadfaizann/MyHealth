// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;

using Foundation;
using UIKit;

using System.Threading.Tasks;

using MyHealthDB;
using MyHealthDB.Logger;


namespace RCSI
{
	public partial class MyProfileController : UIViewController
	{
		enum comboType { Feet, Inches, Metre, Cms, Age, Stones, lbs, Kg, g, County, Gender, BloodGroup}; 
		CustomPickerControl _cpcMetre;
		CustomPickerControl _cpcCms;
		CustomPickerControl _cpcKgs;
		CustomPickerControl _cpcGram;
		CustomPickerControl _cpcFt ;
		CustomPickerControl _cpcInch ;
		CustomPickerControl  _cpcSt;
		CustomPickerControl _cpcLbs;

		public MyProfileController (IntPtr handle) : base (handle)
		{
		}

		public override async void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			await LogManager.Log<LogUsage> (new LogUsage (){ 
				Date = DateTime.Now, 
				Page = Convert.ToInt32(Pages.MyBMI)
			});

			txtHeightFt.BorderStyle = UITextBorderStyle.None;
			txtCounty.Layer.BorderWidth = 0;

			metricAnswer.ValueChanged += MetricAnswerValueChanged;

			_cpcFt = new CustomPickerControl (txtHeightFt, await GetPickerModelData(comboType.Feet));
			_cpcFt.SetPicker ();

			_cpcInch = new CustomPickerControl (txtHeightInc, await GetPickerModelData(comboType.Inches));
			_cpcInch.SetPicker ();

			_cpcSt = new CustomPickerControl (txtWeightSt, await GetPickerModelData(comboType.Stones));
			_cpcSt.SetPicker ();

			_cpcLbs= new CustomPickerControl (txtWeightLbs, await GetPickerModelData(comboType.lbs));
			_cpcLbs.SetPicker ();

			CustomPickerControl cpcCounty = new CustomPickerControl (txtCounty, await GetPickerModelData(comboType.County));
			cpcCounty.SetPicker ();

			CustomPickerControl cpcAge = new CustomPickerControl (txtAge, await GetPickerModelData(comboType.Age));
			cpcAge.SetPicker ();

			CustomPickerControl cpcGender = new CustomPickerControl (txtGender, await GetPickerModelData(comboType.Gender));
			cpcGender.SetPicker ();

			CustomPickerControl cpcBloodGroup = new CustomPickerControl (txtBloodGroup, await GetPickerModelData(comboType.BloodGroup));
			cpcBloodGroup.SetPicker ();

			 _cpcMetre = new CustomPickerControl (txtHeightFt, await GetPickerModelData(comboType.Metre));
			 _cpcCms = new CustomPickerControl (txtHeightInc, await GetPickerModelData(comboType.Cms));
			 _cpcKgs = new CustomPickerControl (txtWeightSt, await GetPickerModelData(comboType.Kg));
			 _cpcGram = new CustomPickerControl (txtWeightLbs, await GetPickerModelData(comboType.g));

			btnCalBMI.TouchUpInside += CalculateBMI;

			/*btnSyncWithServer.TouchUpInside += async (object sender, EventArgs e) => {
				UIApplication.SharedApplication.NetworkActivityIndicatorVisible = true;

				await MyHealthDB.ServiceConsumer.SyncDevice ();

				UIApplication.SharedApplication.NetworkActivityIndicatorVisible = false;
			};*/

			GetProfile ();
			btnSave.TouchUpInside += (object sender, EventArgs e) => {
				SaveProfile ();
			};
		}

		private void SaveProfile () {
			var userDefs = NSUserDefaults.StandardUserDefaults;
			String heightMeter, heightCM,
				weightKg, weightg,
				county, ageRange, gender, bloodGroup;

			heightMeter = "";
			heightCM = "";
			weightKg = "";
			weightg = "";
			county = txtCounty.Text;
			ageRange = txtAge.Text;
			gender = txtGender.Text;
			bloodGroup = txtBloodGroup.Text;
			// if On then the values are already in meter
			// otherwise convert into meter and center etc
			if (metricAnswer.On) {
				heightMeter = txtHeightFt.Text;
				heightCM = txtHeightInc.Text;
				weightKg = txtWeightSt.Text;
				weightg = txtWeightSt.Text;
			} else {
				char[] separators = {'.', ' '};
				// calculating height in meter and centimeter
				var heightFt = txtHeightFt.Text;
				var heightInc = txtHeightInc.Text;
				if (string.IsNullOrEmpty (heightFt)) 
				{
					heightFt = "0 feet";
				}

				if (string.IsNullOrEmpty (heightInc)) 
				{
					heightInc = "0 in";
				}

				var metres = (((Convert.ToDouble (heightFt.Split (separators, 2) [0]) * 12) + Convert.ToDouble (heightInc.Split (separators, 2) [0])) * 2.54) / 100;
				if (metres.ToString ().Split (separators, 2).Length > 1) {
					heightMeter = metres.ToString ().Split (separators, 2) [0] + " m";
					heightCM = Math.Round((metres - Convert.ToDouble(heightMeter.Split (separators,2) [0])) * 100).ToString() + " cm";
				}
			

				String weightSt = txtWeightSt.Text;
				String weightLbs = txtWeightLbs.Text;
				// calculating weight in kg and g
				if (string.IsNullOrEmpty (weightSt)) 
				{
					weightSt = "0 st";
				}

				if (string.IsNullOrEmpty (weightLbs)) 
				{
					weightLbs = "0 lbs";
				}

				var kg = (((Convert.ToDouble (weightSt.Split (separators,2) [0]) * 6.35029) + (Convert.ToDouble (weightLbs.Split (separators,2) [0])) * 0.453592));
				if (kg.ToString ().Split (separators,2).Length > 1) {
					weightKg = kg.ToString ().Split (separators,2) [0] + " kg";
					weightg = Math.Round((kg - Convert.ToDouble(weightKg.Split (separators,2) [0])) * 1000).ToString() + " g";
				}
			}

			userDefs.SetString (heightMeter, "HeightInMeter");
			userDefs.SetString (heightCM, "HeightInCm");
			userDefs.SetString (weightKg, "WeightKilogram");
			userDefs.SetString (weightg, "WeightGram");
			userDefs.SetString (county, "County");
			userDefs.SetString (ageRange, "AgeRange");
			userDefs.SetString (gender, "Gender");
			userDefs.SetString (bloodGroup, "BloodGroup");

			userDefs.SetBool (metricAnswer.On, "ProfileUnitIsMetric");

			userDefs.Synchronize ();

			UIAlertView alert = new UIAlertView (null, "Profile saved successfully", null, "OK",null);
			alert.Show ();
		}

		private void GetProfile() {
			String heightMeter, heightCM,
			weightKg, weightg,
			county, ageRange, gender, bloodGroup;

			var userDefs = NSUserDefaults.StandardUserDefaults;

			heightMeter = userDefs.StringForKey ("HeightInMeter");
			heightCM = userDefs.StringForKey ("HeightInCm");
			weightKg = userDefs.StringForKey ("WeightKilogram");
			weightg = userDefs.StringForKey ("WeightGram");
			county = userDefs.StringForKey ("County");
			ageRange = userDefs.StringForKey ("AgeRange");
			gender = userDefs.StringForKey ("Gender");
			bloodGroup = userDefs.StringForKey ("BloodGroup");

			var profileUnitIsMetric = userDefs.BoolForKey ("ProfileUnitIsMetric");
			metricAnswer.On = profileUnitIsMetric;
			if (profileUnitIsMetric) {
				// if metricAnswer was on then
				// call this method to fill the dropdown to proper values
				MetricAnswerValueChanged (metricAnswer, null);
			}

			if (String.IsNullOrEmpty (county)) {
			}
			if (String.IsNullOrEmpty (ageRange)) {
			}
			if (String.IsNullOrEmpty (gender)) {
			}
			if (String.IsNullOrEmpty (bloodGroup)) {
			}

			txtHeightFt.Text = heightMeter;
			txtHeightInc.Text = heightCM;
			txtWeightSt.Text = weightKg;
			txtWeightLbs.Text = weightg;
			txtCounty.Text = county;
			txtAge.Text = ageRange;
			txtGender.Text = gender;
			txtBloodGroup.Text = bloodGroup;

			if (!profileUnitIsMetric) {
				// if metricAnswer is not on then
				// call this method to convert the correct values to non-metric system
				MetricAnswerValueChanged (metricAnswer, null);
			}
		}

		private void CalculateBMI(object sender, EventArgs e)
		{
			double weight1 = 0;
			double weight2 = 0;
			double height1 = 0;
			double height2 = 0;
			double bmi = 0;

			if (metricAnswer.On) 
			{
				weight1 = string.IsNullOrEmpty(txtWeightSt.Text) ? 0 : Convert.ToDouble (txtWeightSt.Text.Replace("kg", ""));
				weight2 = string.IsNullOrEmpty(txtWeightLbs.Text) ? 0 : Convert.ToDouble (txtWeightLbs.Text.Replace("g","")) * 0.001;
				height1 = string.IsNullOrEmpty(txtHeightFt.Text) ? 0 : Convert.ToDouble (txtHeightFt.Text.Replace("m",""));
				height2 = string.IsNullOrEmpty(txtHeightInc.Text) ? 0 : Convert.ToDouble (txtHeightInc.Text.Replace("cm","")) * 0.01;

				bmi = Math.Round((weight1 + weight2) / ((height1 + height2) * (height1 + height2)),2);

			} else 
			{
				weight1 = string.IsNullOrEmpty(txtWeightSt.Text) ? 0 : Convert.ToDouble (txtWeightSt.Text.Replace("st", "")) * 14;
				weight2 = string.IsNullOrEmpty(txtWeightLbs.Text) ? 0 : Convert.ToDouble (txtWeightLbs.Text.Replace("lbs",""));
				height1 = string.IsNullOrEmpty(txtHeightFt.Text) ? 0 : Convert.ToDouble (txtHeightFt.Text.Replace("feet","")) * 12;
				height2 = string.IsNullOrEmpty(txtHeightInc.Text) ? 0 : Convert.ToDouble (txtHeightInc.Text.Replace("in",""));

				bmi = Math.Round(((weight1 + weight2) / ((height1 + height2) * (height1 + height2))) * 703,2);
			}
			UIAlertView alert = new UIAlertView ("BMI Calculation", "your BMI is " + bmi.ToString(), null, "OK", null);
			alert.Show ();

			PerformSegue ("CalculateBMI", this);
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);
			if (segue.Identifier == "CalculateBMI") {
				//segue.DestinationViewController
			}
		}

		private void MetricAnswerValueChanged(object sender, EventArgs e)
		{
			UISwitch metricAnsSwitch = (UISwitch)sender;
			double metres = 0;
			double feet = 0;
			double kg = 0;
			double stone = 0;
			char[] separators = {'.', ' '};
			if (metricAnsSwitch.On) 
			{
				_cpcMetre.SetPicker ();
				_cpcCms.SetPicker ();
				_cpcKgs.SetPicker ();
				_cpcGram.SetPicker ();

				if (!string.IsNullOrEmpty (txtHeightFt.Text) || !string.IsNullOrEmpty (txtHeightInc.Text)) {

					if (string.IsNullOrEmpty (txtHeightFt.Text)) 
					{
						txtHeightFt.Text = "0 feet";
					}

					if (string.IsNullOrEmpty (txtHeightInc.Text)) 
					{
						txtHeightInc.Text = "0 in";
					}

					metres = (((Convert.ToDouble (txtHeightFt.Text.Split (separators, 2) [0]) * 12) + Convert.ToDouble (txtHeightInc.Text.Split (separators, 2) [0])) * 2.54) / 100;
					if (metres.ToString ().Split (separators, 2).Length > 1) {
						txtHeightFt.Text = metres.ToString ().Split (separators, 2) [0] + " m";
						txtHeightInc.Text = Math.Round((metres - Convert.ToDouble(txtHeightFt.Text.Split (separators,2) [0])) * 100).ToString() + " cm";
					}
				} 

				if (!string.IsNullOrEmpty (txtWeightSt.Text) || !string.IsNullOrEmpty (txtWeightLbs.Text)) 
				{

					if (string.IsNullOrEmpty (txtWeightSt.Text)) 
					{
						txtWeightSt.Text = "0 st";
					}

					if (string.IsNullOrEmpty (txtWeightLbs.Text)) 
					{
						txtWeightLbs.Text = "0 lbs";
					}

					kg = (((Convert.ToDouble (txtWeightSt.Text.Split (separators,2) [0]) * 6.35029) + (Convert.ToDouble (txtWeightLbs.Text.Split (separators,2) [0])) * 0.453592));
					if (kg.ToString ().Split (separators,2).Length > 1) {
						txtWeightSt.Text = kg.ToString ().Split (separators,2) [0] + " kg";
						txtWeightLbs.Text = Math.Round((kg - Convert.ToDouble(txtWeightSt.Text.Split (separators,2) [0])) * 1000).ToString() + " g";
					}
				}

			} 
			else 
			{
				_cpcFt.SetPicker () ;
				_cpcInch.SetPicker () ;
				_cpcSt.SetPicker ();
				_cpcLbs.SetPicker () ;

				if (!string.IsNullOrEmpty (txtHeightFt.Text) || !string.IsNullOrEmpty (txtHeightInc.Text)) 
				{

					if (string.IsNullOrEmpty (txtHeightFt.Text)) 
					{
						txtHeightFt.Text = "0 m";
					}

					if (string.IsNullOrEmpty (txtHeightInc.Text)) 
					{
						txtHeightInc.Text = "0 cm";
					}


					feet = (Convert.ToDouble (txtHeightFt.Text.Split (separators, 2) [0]) * 100 + Convert.ToDouble (txtHeightInc.Text.Split (separators, 2) [0])) * 0.0328084;
					txtHeightFt.Text = feet.ToString ().Split (separators, 2) [0] + " feet";
					txtHeightInc.Text = Math.Round((feet - Convert.ToDouble(txtHeightFt.Text.Split (separators,2) [0])) * 12).ToString() + " in";
				}

				if (!string.IsNullOrEmpty (txtWeightSt.Text) || !string.IsNullOrEmpty (txtWeightLbs.Text)) 
				{

					if (string.IsNullOrEmpty (txtWeightSt.Text)) 
					{
						txtWeightSt.Text = "0 kg";
					}

					if (string.IsNullOrEmpty (txtWeightLbs.Text)) 
					{
						txtWeightLbs.Text = "0 g";
					}

					stone = ((Convert.ToDouble (txtWeightSt.Text.Split (separators,2) [0]) * 0.157473) + (Convert.ToDouble (txtWeightLbs.Text.Split (separators,2) [0]) * 0.000157473)) ;
					txtWeightSt.Text = stone.ToString ().Split (separators,2) [0] + " st";
					txtWeightLbs.Text = Math.Round((stone - Convert.ToDouble(txtWeightSt.Text.Split (separators,2) [0])) * 14).ToString() + " lbs";
				}

			}
		}

		private async Task<PickerModel> GetPickerModelData(comboType type )
		{
			List<string> data = new List<string> ();
			if (type.Equals (comboType.Feet)) 
			{
				for (int i = 1; i <= 12; i++) {
					data.Add (i.ToString () + " feet");
				}
			}
			else if (type.Equals (comboType.Inches)) 
			{
				for (int i = 1; i < 12; i++) {
					data.Add (i.ToString () + " in");
				}
			}
			else if (type.Equals (comboType.Stones)) 
			{
				for (int i = 1; i <= 100; i++) {
					data.Add (i.ToString () + " st");
				}
			}
			else if (type.Equals (comboType.lbs)) 
			{
				for (int i = 1; i < 14; i++) {
					data.Add (i.ToString () + " lbs");
				}
			}
			else if (type.Equals (comboType.Kg)) 
			{
				for (int i = 1; i <= 500; i++) {
					data.Add (i.ToString () + " kg");
				}
			}
			else if (type.Equals (comboType.g)) 
			{
				for (int i = 1; i < 1000; i++) {
					data.Add (i.ToString () + " g");
				}
			}
			else if (type.Equals (comboType.Metre)) 
			{
				for (int i = 1; i <= 5; i++) {
					data.Add (i.ToString () + " m");
				}
			}
			else if (type.Equals (comboType.Cms)) 
			{
				for (int i = 1; i < 100; i++) {
					data.Add (i.ToString () + " cm");
				}
			}
			else if (type.Equals (comboType.Gender)) 
			{
				data.Add ("Male");
				data.Add ("female");
			}
			else if (type.Equals (comboType.Age)) 
			{
				data.Add ("Under 18");
				data.Add ("18-25");
				data.Add ("26-40");
				data.Add ("41-60");
				data.Add ("60+");
			}
			if (type.Equals (comboType.BloodGroup)) 
			{
				data.Add ("O Negative");
				data.Add ("O Positive");
				data.Add ("A Negative");
				data.Add ("A Positive");
				data.Add ("B Negative");
				data.Add ("B Positive");
				data.Add ("AB Negative");
				data.Add ("AB Positive");
			}
			if (type.Equals (comboType.County)) 
			{
//				data.Add ("Leinster");
//				data.Add ("Ulster");
//				data.Add ("Munster");
//				data.Add ("Connacht");

				var counties = await DatabaseManager.SelectAllCounties();
				data = counties.Select(c => c.Name).ToList();
			}
			return new PickerModel (data);
		}
	}
}
